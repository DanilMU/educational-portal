generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Пользовательская модель
model User {
  id           String         @id @default(cuid())
  firstName    String?
  lastName     String?
  email        String         @unique
  password     String
  role         Role           @default(STUDENT)
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  progress     UserProgress[]
  certificates Certificate[]

  @@map("users")
}

// Роли пользователей
enum Role {
  STUDENT
  ADMIN
  MODERATOR
}

// Модель предмета (курса)
model Subject {
  id           String        @id @default(cuid())
  title        String
  description  String
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  topics       Topic[]
  certificates Certificate[]

  @@map("subjects")
}

// Модель темы
model Topic {
  id        String   @id @default(cuid())
  title     String
  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("topics")
}

// Модель урока
model Lesson {
  id        String         @id @default(cuid())
  title     String
  content   String
  topicId   String
  topic     Topic          @relation(fields: [topicId], references: [id], onDelete: Cascade)
  quiz      Quiz?
  progress  UserProgress[]
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")

  @@map("lessons")
}

// Модель теста
model Quiz {
  id        String     @id @default(cuid())
  title     String
  lessonId  String     @unique
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions Question[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("quizzes")
}

// Модель вопроса
model Question {
  id        String       @id @default(cuid())
  text      String
  type      QuestionType
  quizId    String
  quiz      Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   Answer[]
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  @@map("questions")
}

// Типы вопросов
enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

// Модель ответа
model Answer {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("answers")
}

// Модель прогресса пользователя
model UserProgress {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@unique([userId, lessonId])

  @@map("user_progress")
}

// Модель сертификата
model Certificate {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  issuedAt  DateTime @default(now())
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("certificates")
}
